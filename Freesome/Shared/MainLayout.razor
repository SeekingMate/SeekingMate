@inherits LayoutComponentBase
@inject ClientData Data

@if (!string.IsNullOrEmpty(Data.LoginCredential))
{
<div class="page">
    <div style="background-image:none;background-color:lightgreen;" class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://freesome.totalimagine.com/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
}
else
{
<div class="page">
    <main style="background-image:none;background-color:lightgreen;">
        <article class="content px-4">
            <h1>Freesome</h1>
            <h3>Born Out of Desire</h3>
            <div>
                <h5>Login</h5>
                <p>Access Code: <TextEdit @bind-Text="@AccessCode" Pattern="[A-Za-z0-9 ]{3,32}" /></p>
                <p>Passphrase: <TextEdit @bind-Text="@Passphrase" Pattern="[A-Za-z0-9 ]{3,64}" /></p>
                <Button Color="Color.Primary" Clicked="@OnLoginButtonClicked">Login</Button>
                <p>@ErrorMessage</p>
            </div>
            <div>
                <h3>How it Works?</h3>
                <p>
                    <ul>
                        <li>Login using your unique combination of Access Code and Passphrase to access the service - there is no need for registration</li>
                        <li>If the hotel funds are exhausted, even if it's a successful match, since we cannot book the hotel for you, you won't be able to proceed to mating😢</li>
                        <li>This service is completely free of charge and the hotel fund is managed by Seeking Mate Funds Management Ltd. The size of this fund shows the mutual support and care of this community</li>
                    </ul>
                </p>
            </div>
        </article>
    </main>
</div>
}

@code{
    private string AccessCode;
    private string Passphrase;
    private string ErrorMessage;
    async protected override Task OnInitializedAsync()
    {
        Data.LoginCredential = await SecureStorage.Default.GetAsync(nameof(Data.LoginCredential)) ?? string.Empty;
        Data.Nickname = await SecureStorage.Default.GetAsync(nameof(Data.Nickname)) ?? string.Empty;
        Data.Gender = await SecureStorage.Default.GetAsync(nameof(Data.Gender)) ?? string.Empty;
        Data.Age = int.Parse(await SecureStorage.Default.GetAsync(nameof(Data.Age)) ?? "18");
        Data.Ethinity = await SecureStorage.Default.GetAsync(nameof(Data.Ethinity)) ?? string.Empty;
        Data.Weight = float.Parse(await SecureStorage.Default.GetAsync(nameof(Data.Weight)) ?? "50");
        Data.Height = float.Parse(await SecureStorage.Default.GetAsync(nameof(Data.Height)) ?? "50");
        Data.Profession = await SecureStorage.Default.GetAsync(nameof(Data.Profession)) ?? string.Empty;
        Data.MostActiveRegion = await SecureStorage.Default.GetAsync(nameof(Data.MostActiveRegion)) ?? string.Empty;
        Data.ProfileColor = await SecureStorage.Default.GetAsync(nameof(Data.ProfileColor)) ?? null;
        Data.BloodTestAvailability = await SecureStorage.Default.GetAsync(nameof(Data.BloodTestAvailability)) ?? string.Empty;
        await base.OnInitializedAsync();
    }
    async Task OnLoginButtonClicked()
    {
        if (string.IsNullOrWhiteSpace(AccessCode) || string.IsNullOrWhiteSpace(Passphrase))
            return;

        Data.LoginCredential = await ServerAPIHelper.Login(AccessCode.GetHashString(), Passphrase.GetHashString());
        await StorageHelper.UpdateValue(nameof(Data.LoginCredential), Data.LoginCredential);

        if (Data.LoginCredential == null)
            ErrorMessage = "The combination doesn't work.";
    }
}